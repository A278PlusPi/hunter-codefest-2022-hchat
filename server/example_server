// server test code from online
package example

import (
	"fmt"
	"net"
	"os"
	"time"
)

const (
	CONN_HOST = "localhost"
	CONN_PORT = "8888"
	CONN_TYPE = "tcp"
)

func main() {
	// Listen for incoming connections.
	l, err := net.Listen(CONN_TYPE, CONN_HOST+":"+CONN_PORT)
	if err != nil {
		fmt.Println("Error listening:", err.Error())
		os.Exit(1)
	}
	// Close the listener when the application closes.
	defer l.Close()
	fmt.Println("Listening on " + CONN_HOST + ":" + CONN_PORT)
	for {
		// Listen for an incoming connection.
		conn, err := l.Accept()
		if err != nil {
			fmt.Println("Error accepting: ", err.Error())
			os.Exit(1)
		}
		// Handle connections in a new goroutine.
		fmt.Println(&conn)
		test(conn)
		go handRequest(conn)
	}

}

// Handles incoming requests.

func handRequest(conn net.Conn) {
	// anonyomous go function can check if new messages have arrived in connection room
	// and send them while still reading
	go func() {
		for {
			time.Sleep(5 * time.Second)
			sendMessage(conn)
		}
	}()
	buf := make([]byte, 5)
	runLoop := true
	// TODO check if connection is still active
	for runLoop {
		fmt.Println("reading")
		_, err := conn.Read(buf)
		if err != nil || string(buf) == "close" {
			// fmt.Println("Error reading:", err.Error())
			runLoop = false
		} else {
			fmt.Println("received message: " + string(buf))
			conn.Write([]byte("received and responded"))
		}
	}
}
func test(conn net.Conn) {
	fmt.Println(&conn)
}
func handleRequest(conn net.Conn) {
	// Make a buffer to hold incoming data.
	buf := make([]byte, 1024)
	// Read the incoming connection into the buffer.``
	_, err := conn.Read(buf)
	// world := "howdy pardner"
	if err != nil {
		fmt.Println("Error reading:", err.Error())
	}
	var msg string
	for i := 0; i < len(buf); i++ {
		if buf[i] == 0 {
			break
		}
		msg += string(buf[i])
	}
	group_num, message_val, err := processMessage(msg)
	if err != nil {
		msg = "Message sent incorrectly"
	} else {
		msg = message_val
	}
	fmt.Println("group=" + group_num)
	conn.Write([]byte(msg))
	// Send a response back to person contacting us.

	// Close the connection when you're done with it.
	conn.Close()
}

// Processes message
func processMessage(message string) (group_num string, message_val string, err error) {
	// Check if message is transmitted correctly
	for i := 0; i < len(message); i++ {
		if message[i] == '#' {
			group_num = message[0 : i-1]
			message_val = message[i+1:]
			err = nil
			return // Named values
		}
	}
	return
}

func closeConnection(conn net.Conn) {
	conn.Close()
}

func sendMessage(conn net.Conn) {
	conn.Write([]byte("hello"))
}
